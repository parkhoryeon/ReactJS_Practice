# React JS는 UI를 interactive 하게 만들어줘
  React JS는 여러분의 웹사이트에 interactivity(상호작용)을 만들어줘

# React JS 없이 쓴 바닐라 JS 코드와 React JS로 작성한 코드를 비교해보는 순간
  React JS가 왜 태어났는지, 이것이 얼마나 편리한지 깨닫게 될거야

# React JS를 설치하기 위해서는 두 개의 Javascript 코드를 import 해야 해.[ react / react-dom ]

https://unpkg.com/react@17.0.2/umd/react.production.min.js

https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js

# React JS의 규칙 중 하나는 HTML을 이 페이지에 직접 작성하지 않는다는 거야.
  그 대신, Javascript와 React JS를 이용하여 element를 생성할 것이다.
  const span = React.createElement('span') --> span 생성

# 자, 그 다음으로는 span을 페이지에 두어야겠지? 이제부터는 어떻게 body안에 React element를 가져다 둘 수 있는지
  살펴볼거야.

# 하지만 실제로 그렇게 하려면 react-dom을 사용해야 한다.
  React JS는 어플리케이션이 아주 interactive하도록 만들어주는 library이고
  React-dom은 library, 또는 package인데 모든 React element들을 HTML body에 둘 수 있도록 해줘

# render의 의미는 여기 React element를 가지고 HTML로 만들어 배치한다는 것이야.
  const root = document.getElementById('root');
  const span = React.createElement('span');
  ReactDOM.render(span, root);

# createElement에는 우리가 더 작성할 수 있는 argument가 있거든
  자 예를 들어, 두 번째 argument로 둘 수 있는 것은 span의 property들이야.
  property는 class name이 될 수도 있고 id가 될 수도 있는거야. span에 두고 싶은 무엇이든지 괜찮아

# span 안에 무언가를 넣어보자고. 그건 createElement의 세 번째 argument로 들어갈거야.
  createElement의 세 번째 argument는 span의 content(내용)이야.

# React JS에서는 모든 것이 Javascript로서 시작해 그 다음에 HTML이 되는거야
  그리고 이것이 바로 React JS 파워의 핵심이지.

# Javascript와 React JS를 사용하여 element를 생성할 때는 React JS가 element를 생성하고 있지?
  이 말은, React JS는 업데이트가 필요한 element를 업데이트할 것이라는 말이야.
  바로 React JS가 결과물인 HTML을 업데이트할 수 있다는 것이지. 업데이트가 필요하다면 말이야.

# React JS는 유저에게 보여질 내용을 컨트롤할 수 있다는 뜻이야. 그것이 바로 핵심이야.

# const h3 = React.createElement("h3", {
      id: "title",  # Property
      onMouseEnter: () => console.log("mouse enter")  # Event ( on + event )
  }, "Hello I'm a span");  # content

# React JS가 element를 생성하고 eventlistener를 더하는 것을 도와준다.

# React DOM이 React element들을 가져다가 HTML로 바꿔준다.

# React 팀은 개발자들이 element에 event listner를 달아야 한다는 걸 알았지. 바로 이것 때문에 React JS가 훌륭한거야.
  별도로 addEventListener를 할 필요가 없어.

# 앞으로는 이런 방식으로는 절대 하지 않을거야. React 개발자로서, createElement를 쓸 일은 없을거야.
  하지만 이게 핵심이야. 이게 React JS의 기초라고, 그리고 어려운 방법이지.


##########


# createElement를 대체할 수 있는 방법에 대해 다뤄볼거야.
  굳이 createElement를 대체하려는 이유는 개발자들에게 좀 더 편리한 도구를 사용하기 위해서야.
  그 편리한 녀석은 JSX라는 녀석이야.

# JSX는 JavaScript를 확장한 문법이야.
  기본적으로 우리가 여기서 한 것처럼 React 요소를 만들 수 있게 해주는데
  우리가 HTML에서 사용한 문법과 흡사한 문법을 사용해서 말이야.
  생긴게 HTML이랑 비슷해서, JSX로 React 요소를 만드는 게 개발자들 입장에서는 굉장히 편해.

# 새로운 방식은 이런 식으로 진행이돼
  const Title = <h3 id="title" onMouseEnter={ () => console.log("Mouse enter") }>Hello I'm a span</h3>
  이전 방식은 아래와 같아.
  const h3 = React.createElement("h3", {
      id: "title",
      onMouseEnter: () => console.log("Mouse enter")
  }, "Hello I'm a span");
  이전 방식과 새로운 방식은 완전히 같은 의미야.
  이게 바로 JSX야. 일반적인 HTML이랑 거의 똑같이 생겼지.

# 브라우저에서 콘솔을 보면 에러가 발생했을텐데, 브라우저가 JSX를 이해할 수 있게 뭔가를 설치해줘야 돼.

# 이걸 하는데, Babel을 사용하려고 해. Babel은 코드를 변환해주는 녀석인데
  여러분들이 JSX로 적은 코드를 브라우저가 이해할 수 있는 형태로 바꿔주는 거지.
  브라우저는 JSX를 모르니까 말이야.

# Babel standalone을 이용해서 다운받을 거야. (<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>)
  우리는 지금 공부를 하고 있어서 이 방식으로 진행을 하는거지
  혼자할 때는 절대 이렇게 할 일이 없을거야, 이 방식은 느리거든 더 나은 방식들이 있어

# 설치 후, <script type="text/babel"> 타입을 입력해줘야 한다.

# 기억해야 될 게 컴포넌트의 첫 글자는 반드시 대문자여야 한다는 것이야.
  만약 소문자면 React랑 JSX는 이게 HTML button 태그라고 생각할 거야.
  여러분들이 직접 만든 요소는 전부 대문자로 시작해야 돼

# 첫 째로 컴포넌트나 JSX에 변수를 추가하고 싶을 땐 {변수명} 이렇게 사용하면 끝이야.

# 둘 째로 UI를 업데이트하고 싶다면 사용자에게 무언가 변화된 부분을 보여주고 싶다면 render함수를 다시 호출하면 된다.

# 우리가 버튼을 클릭할 때, 물론 Container 컴포넌트 전체를 리렌더링하는 거지만, 사실은 HTML 코드에서는 오로지 숫자만 바뀌는 거야.
  React.js 는 굉장히 똑똑해서 우리가 새로 렌더링하더라도 전체를 전부 재생성할 필요없이 바뀐부분만 새로 생성할 수 있게 도와준다.

# 문제가 생겼는데, 데이터가 바뀔때마다 이 함수를 호출하는걸 잊어서는 안된다는 거야.
  function render() {
      ReactDOM.render(<App />, root);
  }
  리렌더링을 일으키는데 좀 더 나은 방식이 있을거야.

# React.js 어플 내에서 데이터를 보관하고 자동으로 리렌더링을 일으킬 수 있는 최고의 방법을 배워보려해.

# 이제 여러분에게 React 어플리케이션을 다룰때, 어디에 데이터를 담으면 되는지 알려주고 싶어.

# React.js는 여러분들을 도와줄 기능들을 가지고 있지
  만약 그런 기능들을 사용하고 싶으면 React.js가 제시하는 룰을 따라야겠지
  data라는 녀석을 하나 만들어주고 함수 내에서 return문 전에 상수를 하나 만들어주는거야.
  그리고 React.useState()를 사용할거야.
  Ex: const data = React.useState()

# data를 console.log 해보면 [undefined, f] (배열)로 이루어져 있는데,
  여기 이 함수는 data를 바꿀때 사용하는 함수인거야.
  React.useState() 함수는 초기값을 설정할 수도 있어
  배열의 첫 번째 값은 초기값이고 두 번째 요소는 그 값을 바꾸는 함수야.

# React.useState 함수는 counter 같은 데이터를 숫자형 데이터로 건네줄거고 그 데이터 값을 바꿀 함수도 함께 줄거야.
  그리고 그 함수를 이용해서 데이터를 바꿨을때, 데이터 값이 바뀌고 컴포넌트도 동시에 리렌더링 될거야. 업데이트가 완료되는거지.
  
# 그래서 보통 사람들이 하는 방식은, 데이터를 이름 붙일때 counter처럼 원하는대로 붙이고,
  modifier는 modifier가 아니라, set 뒤에 데이터이름을 붙여주는거야.

# modifier 함수를 사용해 state, 즉 어플리케이션의 데이터를 바꿀때
  다시 말해 modifier 함수를 이용해서 컴포넌트의 state를 바꿀때, 컴포넌트는 새로운 값을 가지고 다시 한번 렌더링되는거야.

# 가장 중요한건 state가 바뀌면 리렌더링이 일어난다는거야.

# 이전 단계의 state를 이용해서 현재 state를 바꾸려했지만, 결과가 예상과 다르게 나오는거지.

# 자 이부분은 명심해야해.
  이런 현상들은 흔치 않고 자주 쓰이진 않겠지만, state를 바꾸는 2가지 방법들이 있어.
  하나는 setCounter를 이용해서 우리가 원하는 값을 넣어주는 거야.
  또 하나는 이전 값을 이용해서 현재 값을 계산해 내는 건데, 지금 사용하는 방법 setCounter(counter + 1);

# 하지만 이것보다 더 나은 방법이 있어.
  만약 여러분이 이전 값을 바탕으로 현재 값을 설정하고 싶다면 setCounter(counter + 1); 이 부분을 좀 다르게 해줄 수 있어.
  왜냐하면 우린 여기서 현재의 counter 값을 가지고 계산해주고 있어.
  만약 여러분이 현재 값을 가지고 계산을 해야한다면 
  setCounter를 쓰긴 할건데, setCounter에는 함수를 넣을수도 있어.
  이 함수의 첫 번째 argument는 현재 값이야  setCounter((current) => current + 1);

# 둘 다 현재의 state를 가지고 새로운 값을 계산해내지. 하지만 아래쪽이 더 안전해.
  왜냐하면 여러분이 이런식으로 함수를 사용했을 때
  리액트가 이 current가 확실히 현재 값이라는걸 보장하고 있어. 우리가 정확히 원하는 값으로 계산할 수 있도록

# <label for="minutes">Minutes</label>
  <input id="minutes" placeholder="Minutes" type="number" />
  <label for="hours">Hours</label>
  <input id="hours" placeholder="Hours" type="number" />    
  이건 사실 틀렸어. React JS의 세계에서는 말이지. JSX에서는 다르게 표현해줘야 해.
  기억해, 우린 지금 HTML을 사용하는 게 아니야. 하지만 보다시피 에러가 뜨진 않지. 왜냐하면 production.min.js를 사용중이거든

# <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>
  //
  <script src="https://unpkg.com/react@17.0.2/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js"></script>

# JSX는 HTML과 비슷하지만 다른 점 몇 가지 기억할 게 있단 거야.
  예를들어 class를 사용하면 안된다는 거. className이라고 써줘야 한다.
  for도 쓰면 안돼. htmlFor이라고 써줘야 해.

# 좋아, React JS 세계에서는, 이 input은 uncontrolled이라고 알려져있어.
  그 말인 즉, 여기 input의 value는 우리가 통제할 수 없단거지.

# Props는 일종의 방식이야. 부모 컴포넌트로부터 자식 컴포넌트에 데이터를 보낼 수 있게 해주는 방법.

# 컴포넌트라는것은 단지 함수야. 어떤 JSX를 반환하는 그 뿐이야.

# 네가 만들고 사용하는 모든 컴포넌트들은 "()" 괄호로 argument(인자)를 받는다는 거야. 리액트가 넣어주는 거지.
  여기 첫 번째 argument의 이름은 마음대로 지어줄 수 있어.
  사람들은 이 인자 이름을 props라고 부르지. Btn으로부터 전달 받는 properties인거지

# 결국 <Btn banana="Save Changes"/> 이렇게 쓰는것은 Btn()를 불러서 banana라는 인자를 이런식으로 보내는 것과 같은거야.
  Btn({banana: "Save Changes"}) 와 동일한거야. 왜냐하면 "Btn"은 함수니까.

# 두 번째 인자는 없어. props는 첫 번째이자 유일한 인자야. 이 Btn이 전달 받는 유일한 인자.

# 내가 만약 onClick을 커스텀 컴포넌트에다가 넣는다면 그것은 이벤트리스너가 아닌 props야.

# prop으로는 text, boolean 말고도 함수도 보낼 수 있다.

# React Memo
  만약 부모(App)가 어떤 state라도 변경이 있다? 모든 자식들은 다시 그려질거야(re-render)
  그리고 이게 추후에 네 어플리케이션이 느려지는 원인이 될 수도 있어.
  그 컴포넌트가 천 개의 컴포넌트를 그리고 있다고 말이야.
  React JS에게 만약 이 props가 변경되지 않는다면 다시 그릴 필요가 없다는 것을 말해줬을 뿐이야.

# PropTypes라는 이름의 한 패키지가 있어.
  PropType은 네가 어떤 타입의 prop을 받고 있는지를 체크해준단 말이지. 정말로 유용해
  <script src="https://unpkg.com/prop-types@15.6/prop-types.js"></script>
  우리의 컴포넌트 이름을 가져와서 타입이 뭐고 어떤 모양이어야 하는지를 우리가 설명해줄 수 있다는거지.
  prop이름과, 그 type을 쓰면 된다.
  Btn.propTypes = {
      text: PropTypes.string.isRequired,
      fontSize: PropTypes.number,
  }  

# 이번 섹션에서는 우리는 Create React App에 대해서 친해져 볼거야.
  create-react-app은 리액트 어플리케이션을 만드는 최고의 방식이야.
  봤다시피 우리가 이전에 만든 리액트 어플리케이션은 스크립트를 import 함으로써 만들어졌지.
  create-react-app을 사용한다면, React JS 어플리케이션을 만듦에 있어 훨씬 쉬워질 거야.
  이유는, create-react-app은 엄청나게 많은 스크립트들과 많은 사전설정들을 너를 위해서 준비해주기 때문이지.

# 예를들면, 네가 create-react-app을 이용해서 작업을 할 때, 개발 서버에 접근한다든가, 자동으로 새로고침을 시켜준다든가,
  즉각적으로 어플리케이션 안에 CSS를 포함시켜 준다든가 하는 기능들이 있어

# 그리고, 우리가 웹사이트를 publish할 준비가 되면 create-react-app은 publish하는 명령어를 갖고 있단 말이지.
  코드를 압축하고, 좀 더 빠르게 만들고 그냥 진짜 멋진 녀석이야.
  다들 리액트 어플리케이션을 만들어야 할 때 이걸 사용한단 말이지

# 그러기 위해서는 너는 node.js를 설치해줘야 한다.













